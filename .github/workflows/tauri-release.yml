name: 'publish'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # Universal binary for both Intel and Apple Silicon
            args: '--target universal-apple-darwin'
            target: 'universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.target }}
          cache-on-failure: true

      - name: install frontend dependencies
        run: npm install

      - name: build frontend
        run: npm run build

      - name: verify frontend build (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Checking frontend build output..."
          ls -la dist/ || echo "dist directory not found"
          echo "Checking Tauri config..."
          cat src-tauri/tauri.conf.json

      - name: verify frontend build (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Checking frontend build output..."
          if (Test-Path "dist") { Get-ChildItem dist } else { echo "dist directory not found" }
          echo "Checking Tauri config..."
          Get-Content src-tauri/tauri.conf.json

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'AetherLink v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: debug build output (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          echo "Checking build artifacts..."
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" 2>/dev/null || echo "No build artifacts found"
          echo "Bundle directory structure:"
          ls -la src-tauri/target/release/bundle/ 2>/dev/null || echo "Bundle directory not found"
          echo "Target directory structure:"
          ls -la src-tauri/target/release/ 2>/dev/null || echo "Release directory not found"

      - name: debug build output (Windows)
        if: always() && runner.os == 'Windows'
        run: |
          echo "Checking build artifacts..."
          if (Test-Path "src-tauri/target") {
            Get-ChildItem -Recurse src-tauri/target -Include "*.msi", "*.exe" | ForEach-Object { echo $_.FullName }
          } else {
            echo "No build artifacts found"
          }
          echo "Bundle directory structure:"
          if (Test-Path "src-tauri/target/release/bundle") {
            Get-ChildItem src-tauri/target/release/bundle
          } else {
            echo "Bundle directory not found"
          }
          echo "Target directory structure:"
          if (Test-Path "src-tauri/target/release") {
            Get-ChildItem src-tauri/target/release
          } else {
            echo "Release directory not found"
          }


